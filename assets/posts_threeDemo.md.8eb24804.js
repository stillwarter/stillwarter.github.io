import{_ as l,o,c as p,C as e,x as s,a,N as t,D as r}from"./chunks/framework.d770699b.js";const g=JSON.parse('{"title":"three.js Demo","description":"","frontmatter":{"title":"three.js Demo","outline":"deep","date":"2023-04-02T00:00:00.000Z","tags":["three.js","Stu","Demo"]},"headers":[],"relativePath":"posts/threeDemo.md"}'),c={name:"posts/threeDemo.md"},F=s("h1",{id:"一个简单-threejs-demo",tabindex:"-1"},[a("一个简单 threejs Demo "),s("a",{class:"header-anchor",href:"#一个简单-threejs-demo","aria-label":'Permalink to "一个简单 threejs Demo"'},"​")],-1),y=s("p",null,"很早之前就想用用threejs了，趁着重构blog项目的空余就看能不能写一个简单的threejs的样例。总结下来的思路就是：创建一个3D场景，布置好投影仪，设置好渲染器，然后构建你的场景，最后将渲染出的画面或动画添加到对应的dom节点上。",-1),D=s("h2",{id:"示例",tabindex:"-1"},[a("示例 "),s("a",{class:"header-anchor",href:"#示例","aria-label":'Permalink to "示例"'},"​")],-1),i=t(`<p>源码：<a style="cursor:pointer;" href="https://github.com/stillwarter/vitepress-blog-stillwarter/blob/master/.vitepress/theme/mycomponents/Demo/threeDemo.vue">sir，this way</a></p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="_0-环境准备" tabindex="-1">0.环境准备 <a class="header-anchor" href="#_0-环境准备" aria-label="Permalink to &quot;0.环境准备&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onMounted</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> three </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">three</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">OrbitControls</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">three/addons/controls/OrbitControls.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> gsap </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gsap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这是我们需要提前导入的模块，onMounted 用于解决 vite 编译时出现的 window 未定义报错（我渲染的动画需要放在 onMounted 周期内）。</p><p>需要提前导入 three 和 OrbitControls（轨道控制器）。</p><p>为了方便控制动画的渲染导入 gasp，这个包商用是收费的嗷。</p><h3 id="_1-创建-threejs-场景" tabindex="-1">1.创建 threejs 场景 <a class="header-anchor" href="#_1-创建-threejs-场景" aria-label="Permalink to &quot;1.创建 threejs 场景&quot;">​</a></h3><p>threejs 的场景只有 1 种，用 THREE.Scene 来表示。场景是用于保存画布上所有元素信息的容器，比如可以保存对象，光源，物体等信息。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> scene </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scene</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Scene 有一些方法和属性来控制场景内的元素的显示。</p><p>由于 threejs 中的大部分类都继承自基类 Object3D，属性和方法都比较多，所以这里我们就不再依次介绍每个类的属性和方法，有兴趣可以自己看官网的示例</p><h3 id="_2-创建相机" tabindex="-1">2.创建相机 <a class="header-anchor" href="#_2-创建相机" aria-label="Permalink to &quot;2.创建相机&quot;">​</a></h3><p>场景创建完成之后，我们需要使用一种投影模式来渲染我们的图形，为了追求真实性，我们使用模拟人眼的 PerspectiveCamera 来创建相机，它是 3D 场景的渲染中使用得最普遍得投影模式。</p><p>threejs 的相机有一个抽象基类 Camera，而我们在构建新相机时，应该始终继承此类。意思是这个类不用于实例化哦，而是在我们创建一个新的相机类的时候应该继承它。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> camera </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PerspectiveCamera</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">75</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerWidth </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHeight</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>构造的参数分别是：摄像机锥体垂直视野角度（最小值 0，最大值 180，默认 50，一般用的是 45，睁眼的角度接近 45），摄像机锥体长宽比（默认为 1，实际项目使用的是屏幕的宽高比），摄像机锥体近端面和远端面（默认是 0.1 和 2000，实际项目的近端值一般是 1）。</p><p>这样说可能比较抽象，那么请发挥你的想象，将透视摄像机想象为一个眼睛，角度就是我们视角的角度范围，摄像头的比例就是我们视角的比例，摄像机的近端和远端就是我们视角的距离范围。</p><p>实际上我们看到的物体还和摄像机的三维坐标位置有关，在物体超出我们视角或者不在视角内时，可能会出现黑屏的问题。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(camera)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在设置完成 camera 后需要调整位置（默认是原点也就是 0，0，0），调整完后将相机加入场景中。</p><h3 id="_3-添加物体" tabindex="-1">3.添加物体 <a class="header-anchor" href="#_3-添加物体" aria-label="Permalink to &quot;3.添加物体&quot;">​</a></h3><p>demo 里的物体时三角形群，实际上是使用循环一个个渲染出来的。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">gemo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BufferGeometry</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">positionArray</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Float32Array</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">9</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">positionArray</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">gemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">position</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BufferAttribute</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">positionArray</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">color</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Color</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffermaterial</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LineBasicMaterial</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">color</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    linewidth</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    linecap</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">round</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    linejoin</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">round</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffermesh</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Mesh</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">gemo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffermaterial</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">gasp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">buffermesh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rotation</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    y</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PI</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    duration</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    repeat</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    yoyo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">buffermesh</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="_3-1-buffergeometry" tabindex="-1">3.1 BufferGeometry <a class="header-anchor" href="#_3-1-buffergeometry" aria-label="Permalink to &quot;3.1 BufferGeometry&quot;">​</a></h4><p>这里在循环内，实例化 BufferGeometry，BufferGeometry 是面，线或者几何体的描述。包括顶点位置，面索引，法向量等属性。使用这个类可以有效减小向 GPU 传输上述数据所需要的开销。官方文档有详细的栗子，有兴趣可以看一看。</p><h4 id="_3-2-buffergeometry" tabindex="-1">3.2 BufferGeometry <a class="header-anchor" href="#_3-2-buffergeometry" aria-label="Permalink to &quot;3.2 BufferGeometry&quot;">​</a></h4><p>这个类用于存储与 BufferGeometry 相关联的 attribute（比如顶点位置向量，面索引，颜色值等）。</p><p>若构造一个 BufferGeometry 实例，必须要传入两个变量---一个数组，一个 itemSize。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BufferAttribute</span><span style="color:#A6ACCD;">(positionArray</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这里 positionArray 存储的就是坐标信息，渲染器会根据这些坐标去渲染图形；参数 3 指的是数组内每三个元素构成一个坐标点。</p><h4 id="_3-3-linebasicmaterial" tabindex="-1">3.3 LineBasicMaterial <a class="header-anchor" href="#_3-3-linebasicmaterial" aria-label="Permalink to &quot;3.3 LineBasicMaterial&quot;">​</a></h4><p>LineBasicMaterial，基础线条材质，一种用于绘制线框样式几何体的材质。该类继承自 Material。</p><p>Material，材质的抽象基类。材质描述对象的外观，它们的定义方式与渲染器无关，换句话说不同的渲染器在材质上的表现大体是相同的。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffermaterial </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LineBasicMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  color</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">linewidth</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">linecap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">round</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">linejoin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">round</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在实例化 buffermaterial（物体材质）时，我们传入了四个参数，color 是指线的颜色，linewidth 指的是线的宽度，linecap 是指顶点间的线段端点如何显示（默认是 round），linejoin 是线的连接处如何显示（默认是 round）。不过后两者在 webGLrenderer 里的效果不是很好，即使修改这两个属性或许也无法很好的看到不一样的地方。</p><h4 id="_3-4-mesh" tabindex="-1">3.4 Mesh <a class="header-anchor" href="#_3-4-mesh" aria-label="Permalink to &quot;3.4 Mesh&quot;">​</a></h4><p>Mesh，网格，表示基于以三角形为多边形网格的物体的类。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Mesh</span><span style="color:#A6ACCD;">(gemo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> buffermaterial)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>我们使用 Mesh 类来实例化我们的图案，这里的 gemo 就是我们事先准备好的 bufferGeometry 的实例，后者是我们实现的材质的实例。</p><h4 id="_3-5-gsap" tabindex="-1">3.5 gsap <a class="header-anchor" href="#_3-5-gsap" aria-label="Permalink to &quot;3.5 gsap&quot;">​</a></h4><p>gsap，一个动画库，主要是方便我们实现动画效果。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">gsap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(buffermesh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rotation</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PI</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">duration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">repeat</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">yoyo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这段代码主要就是告诉 gsap 该如何对 buffermesh，也就是我们实例化的图案，进行旋转的动画操作。buffermesh.rotation 就是图案的旋转属性，而后续的配置将告诉 gsap 如何对 buffermesh 进行旋转操作。</p><p>y 属性代表对图形绕 y 轴进行旋转，旋转 180 度，duration 表示动画持续时间，repeat 表示重复次数，-1 代表东动画循环，yoyo 表示每隔一个重复，将有一个反向的补间动画。</p><h3 id="_4-初始化渲染器" tabindex="-1">4.初始化渲染器 <a class="header-anchor" href="#_4-初始化渲染器" aria-label="Permalink to &quot;4.初始化渲染器&quot;">​</a></h3><p>在准备好后我们就可以着手初步的渲染了，虽然我们往场景里增加了相机和物体，但实际上我们还需要渲染器将其渲染出现。</p><p>threejs 里内置了不少的渲染类，我们这里使用 WebGLRenderer，有关 WebGL 相关的内容，我会在后续更新。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> renderer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> three</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WebGLRenderer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">antialias</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这里我在实例化的时候提供了 antialias 这个参数，意思是抗锯齿（默认是 false），为了是让渲染出的图形更好看，当然会增加渲染的负担。</p><h3 id="_5-增加轨道控制器" tabindex="-1">5.增加轨道控制器 <a class="header-anchor" href="#_5-增加轨道控制器" aria-label="Permalink to &quot;5.增加轨道控制器&quot;">​</a></h3><p>虽然我得到了渲染出来的图像，但我无法控制视角，也就是说我们想通过鼠标来拖动视角移动的话，需要创建轨道控制器来实现。</p><p>OrbitControls，轨道控制器，可以使相机围绕目标进行轨道运动。使用这个功能必须提前导入。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">OrbitControls</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">three/addons/controls/OrbitControls.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> controls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OrbitControls</span><span style="color:#A6ACCD;">(camera</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">controls</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enableDamping </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>实例化轨道控制器必须得传入 camrea 参数，也就是说这个类必须知道你想要对哪个相机实现轨道控制。第二个参数非必须，默认值就是 body，整个窗口都会被轨道控制器监听，若你想缩小控制范围，可以将具体得渲染类对应得节点作为参数传入。</p><p>为了得到更真实得操作体验，可以将 enableDamping 这个属性改为 true（默认为 false），还有更多得属性和方法，请移步官网。</p><h3 id="_6-使用-requestanimationframe-配和渲染器进行渲染" tabindex="-1">6.使用 requestAnimationFrame 配和渲染器进行渲染 <a class="header-anchor" href="#_6-使用-requestanimationframe-配和渲染器进行渲染" aria-label="Permalink to &quot;6.使用 requestAnimationFrame 配和渲染器进行渲染&quot;">​</a></h3><p>在 requestAnimationFrame 之前，是使用 setTimeout 来做简单得动画帧渲染的，reuqestAnimationFrame 的作用就是替代 setTimeout 做更高性能的动画和解决定时器动画间隔不稳定的问题。</p><p>这里自定义一个 render 函数来做整合。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">renderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">camera</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">requestAnimationFrame</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">render</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在我们调用这个 render 函数时，requestAnimationFrame 会根据显示器的刷新率来递归调用 render 函数，这样我们就能得到正在不断渲染的图形动画，而不是一张静态的照片。</p><h3 id="_7-绑定节点" tabindex="-1">7.绑定节点 <a class="header-anchor" href="#_7-绑定节点" aria-label="Permalink to &quot;7.绑定节点&quot;">​</a></h3><p>在我们做好一切前置工作后，需要将渲染器绑定到 dom 节点上。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> threeshow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.threeshow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">threeshow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>除此之外，其实还有很多属性方法没有说到。three 是一个庞大的三维框架，想要真正用好还有很多功课需要做，或许在真正深入之前还需要了解图形化知识，webgl 和浏览器渲染模式等内容。</p><p>实际上代码的实现大部分来自<a style="cursor:pointer;" href="https://www.bilibili.com/video/BV1Gg411X7FY/?spm_id_from=333.337.search-card.all.click">b站的视频教程</a>，我做的不过是将其搬到这里，不过具体的实现有差异，总而言之自己手敲一遍还是很有意义的，最后感谢这些传道者，然我不至于在求知的路上摸黑前行。</p>`,67);function C(A,h,d,u,m,f){const n=r("threeDemo",!0);return o(),p("div",null,[F,y,D,e(n),i])}const q=l(c,[["render",C]]);export{g as __pageData,q as default};
